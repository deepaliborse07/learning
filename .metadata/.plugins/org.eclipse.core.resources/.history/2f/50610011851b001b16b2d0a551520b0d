package multiplethreads;

public class Main {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		InventoryCounter inventorycounter=new InventoryCounter();
		IncrementingThread incrementingThread=new IncrementingThread(inventorycounter);
		DecrementingThread decrementingThread=new DecrementingThread(inventorycounter);
		
		incrementingThread.start();
		
		decrementingThread.start();
		
		incrementingThread.join();
		
		decrementingThread.join();
		
		System.out.println("we currently have" +inventorycounter.getItems() +"items");

	}
	
	public static class DecrementingThread extends Thread{
		
		private InventoryCounter inventoryCounter;

		public DecrementingThread(InventoryCounter inventoryCounter) {
			
			this.inventoryCounter = inventoryCounter;
		}
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			for(int i=0;i<1000;i++) {
				inventoryCounter.decrement();
			}
		}
	}
	
	public static class IncrementingThread extends Thread{
		
		private InventoryCounter inventoryCounter;

		public IncrementingThread(InventoryCounter inventoryCounter) {
			
			this.inventoryCounter = inventoryCounter;
		}
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			for(int i=0;i<1000;i++) {
				inventoryCounter.increment();
			}
		}
	}
	
	private static class InventoryCounter{
		
		private int items=0;
		
		Object lock=new Object(); 
		
		public void increment() {
			synchronized (this.lock) {
				items++;
			}
		
		}
		
		public synchronized void decrement() {
			items--;
		}
		
		public synchronized int getItems() {
			return items;
			
		}
	}

}
